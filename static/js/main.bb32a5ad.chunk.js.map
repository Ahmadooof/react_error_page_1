{"version":3,"sources":["images/1.jpeg","App.js","reportWebVitals.js","index.js"],"names":["App","estimatedTime","timerRef","useRef","countDownDate","Date","getTime","useEffect","interval","setInterval","now","distance","days","Math","floor","hours","minutes","seconds","current","innerText","clearInterval","className","src","imageUnderConstruction","alt","ref","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oJAAe,G,UAAA,IAA0B,gC,OC6C1BA,MAzCf,WACE,IAEIC,EAFEC,EAAWC,iBAAO,MAGpBC,EAAgB,IAAIC,KAAK,0BAA0BC,UA2BvD,OAzBAC,qBAAU,WACR,IAAMC,EAAWC,aAAY,WAE3B,IAAIC,GAAM,IAAIL,MAAOC,UAGjBK,EAAWP,EAAgBM,EAG3BE,EAAOC,KAAKC,MAAMH,EAAQ,OAC1BI,EAAQF,KAAKC,MAAOH,EAAQ,MAAT,MACnBK,EAAUH,KAAKC,MAAOH,EAAQ,KAAT,KACrBM,EAAUJ,KAAKC,MAAOH,EAAQ,IAAkB,KACpDV,EAAgBC,EAASgB,QAAQC,UAAY,mBAAqBP,EAAO,KAAOG,EAAQ,KACpFC,EAAU,KAAOC,EAAU,OAC9B,KAEH,OAAO,WACLG,cAAcZ,MAIf,IAID,sBAAKa,UAAU,MAAf,UACE,qBAAKA,UAAU,SAASC,IAAKC,EAAwBC,IAAI,iBACzD,mBAAGH,UAAU,QAAQI,IAAKvB,EAA1B,SACGD,QC3BMyB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.bb32a5ad.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/1.bf0cc369.jpeg\";","import { useEffect, useRef } from 'react';\nimport './App.css';\nimport imageUnderConstruction from './images/1.jpeg'\n\nfunction App() {\n  const timerRef = useRef(null)\n\n  let estimatedTime\n  var countDownDate = new Date(\"Juni 27, 2021 09:37:25\").getTime()\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n\n      var now = new Date().getTime()\n\n      // Find the distance between now and the count down date\n      var distance = countDownDate - now;\n\n      // Time calculations for days, hours, minutes and seconds\n      var days = Math.floor(distance / (1000 * 60 * 60 * 24))\n      var hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60))\n      var minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60))\n      var seconds = Math.floor((distance % (1000 * 60)) / 1000)\n      estimatedTime = timerRef.current.innerText = \"Estimated Time: \" + days + \"d \" + hours + \"h \"\n        + minutes + \"m \" + seconds + \"s \";\n    }, 1000)\n    //   cleanup\n    return () => {\n      clearInterval(interval);\n    }\n    // return () => {\n    // }\n  }, [])\n\n\n  return (\n    <div className=\"app\">\n      <img className=\"image1\" src={imageUnderConstruction} alt=\"Comming soon\" />\n      <p className=\"timer\" ref={timerRef}>\n        {estimatedTime}\n      </p>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}